{"version":3,"sources":["constants/index.js","actions/index.js","components/SearchBar.js","components/SelectedTime.js","components/TimeInterval.js","components/WeatherCard.js","components/WeatherList.js","components/Footer.js","components/App.js","store.js","reducers/index.js","index.js"],"names":["FETCH_WEATHER_DATA_REQUEST","FETCH_WEATHER_DATA_SUCCESS","FETCH_WEATHER_DATA_FAIL","SELECT_WEATHER_DISPLAY_TIME","SELECT_WEATHER_DISPLAY_DAY","SET_TEMPERATURE_UNIT","fetchWeather","city","dispatch","getState","a","type","url","window","location","protocol","unit","axios","get","data","payload","message","changeDisplayTime","id","currentData","weather","find","item","dt","setTempUnit","value","SearchBar","useState","setCity","useDispatch","error","useSelector","state","Row","className","Col","md","xs","Alert","variant","Form","onSubmit","e","preventDefault","Group","controlId","Control","placeholder","onChange","target","Text","Button","onClick","SelectedTime","selectedData","selectedDay","useEffect","selectedDayData","dt_txt","split","Container","Image","src","icon","alt","description","Math","round","main","temp","name","humidity","wind","speed","toFixed","country","Date","toDateString","slice","TimeInterval","selectedDayDataIndex","indexOf","selectedDataTime","map","itemDataTime","WeatherCard","cardDay","changeDisplayDay","Card","Title","Img","Body","WeatherList","Number","i","Footer","href","App","rootReducer","combineReducers","action","loading","list","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.57abf7d7.chunk.js","sourcesContent":["export const FETCH_WEATHER_DATA_REQUEST = 'FETCH_WEATHER_DATA_REQUEST'\nexport const FETCH_WEATHER_DATA_SUCCESS = 'FETCH_WEATHER_DATA_SUCCESS'\nexport const FETCH_WEATHER_DATA_FAIL = 'FETCH_WEATHER_DATA_FAIL'\nexport const SELECT_WEATHER_DISPLAY_TIME = 'SELECT_WEATHER_DISPLAY_TIME'\nexport const SELECT_WEATHER_DISPLAY_DAY = 'SELECT_WEATHER_DISPLAY_DAY'\nexport const SET_TEMPERATURE_UNIT = 'SET_TEMPERATURE_UNIT'\n","import axios from 'axios'\nimport {\n  FETCH_WEATHER_DATA_REQUEST,\n  FETCH_WEATHER_DATA_FAIL,\n  FETCH_WEATHER_DATA_SUCCESS,\n  SELECT_WEATHER_DISPLAY_TIME,\n  SELECT_WEATHER_DISPLAY_DAY,\n  SET_TEMPERATURE_UNIT,\n} from '../constants'\n\nexport const fetchWeather = (city) => async (dispatch, getState) => {\n  try {\n    dispatch({ type: FETCH_WEATHER_DATA_REQUEST })\n    let url\n\n    if (window.location.protocol === 'http:') {\n      url = `http://api.openweathermap.org/data/2.5/forecast?q=${city}&units=${\n        getState().unit\n      }&appid=bec94a3e4508449a5a9ff54c70a1990d`\n    } else {\n      url = `https://api.openweathermap.org/data/2.5/forecast?q=${city}&units=${\n        getState().unit\n      }&appid=bec94a3e4508449a5a9ff54c70a1990d`\n    }\n\n    const { data } = await axios.get(url)\n\n    dispatch({\n      type: FETCH_WEATHER_DATA_SUCCESS,\n      payload: data,\n    })\n  } catch (err) {\n    dispatch({ type: FETCH_WEATHER_DATA_FAIL, payload: err.message })\n  }\n}\n\nexport const changeDisplayTime = (id) => (dispatch, getState) => {\n  const currentData = getState().weather.data.find((item) => item.dt === id)\n  dispatch({ type: SELECT_WEATHER_DISPLAY_TIME, payload: currentData })\n}\n\nexport const changeDisplayDay = (dt_txt) => {\n  const selectedDay = dt_txt.split(' ')[0]\n  return { type: SELECT_WEATHER_DISPLAY_DAY, payload: selectedDay }\n}\n\nexport const setTempUnit = (value) => {\n  return { type: SET_TEMPERATURE_UNIT, payload: value }\n}\n","import React, { useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Alert, Col, Row, Button, Form } from 'react-bootstrap'\n\nimport { fetchWeather } from '../actions'\n\nconst SearchBar = () => {\n  const [city, setCity] = useState('')\n  const dispatch = useDispatch()\n\n  // Global state variable\n  const error = useSelector((state) => state.weather.error)\n\n  const handleSubmit = (e) => {\n    e.preventDefault()\n    // Redux action\n    dispatch(fetchWeather(city))\n    setCity('')\n  }\n\n  return (\n    <Row className='justify-content-center mb-5 mt-5'>\n      <Col md={6} xs={11}>\n        {/* if fetching data from api gives error */}\n        {error && (\n          <Alert variant='danger' className='text-center p-1'>\n            City not found!\n          </Alert>\n        )}\n        <Form onSubmit={handleSubmit} className='justify-content-center'>\n          <Row>\n            <Col>\n              <Form.Group className='mb-3' controlId='city'>\n                <Form.Control\n                  type='text'\n                  placeholder='Enter a city'\n                  value={city}\n                  onChange={(e) => setCity(e.target.value)}\n                />\n                {/* If input is empty, show the example */}\n                {!city && (\n                  <Form.Text className='ml-3 text-info'>\n                    e.g. New York\n                  </Form.Text>\n                )}\n              </Form.Group>\n            </Col>\n            <Col xs={'auto'}>\n              <Button variant='info' type='button' onClick={fetchWeather}>\n                Fetch\n              </Button>\n            </Col>\n          </Row>\n        </Form>\n      </Col>\n    </Row>\n  )\n}\n\nexport default SearchBar\n","import React, { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Container, Col, Row, Image } from 'react-bootstrap'\nimport { setTempUnit, fetchWeather, changeDisplayTime } from '../actions'\n\nconst SelectedTime = () => {\n  const data = useSelector((state) => state.weather.data)\n  const selectedData = useSelector((state) => state.weather.selectedData)\n  const location = useSelector((state) => state.weather.location)\n  const unit = useSelector((state) => state.unit)\n  const selectedDay = useSelector((state) => state.weather.selectedDay)\n  const dispatch = useDispatch()\n\n  const msToKmh = (value) => {\n    return ((value * 18) / 5).toFixed(2)\n  }\n\n  useEffect(() => {\n    const selectedDayData = data.find(\n      (item) => item.dt_txt.split(' ')[0] === selectedDay\n    )\n    dispatch(changeDisplayTime(selectedDayData.dt))\n  }, [selectedDay])\n\n  return (\n    <Container className='border rounded'>\n      <Row className='demo'>\n        {/* Current Day left screen */}\n        <Col xs={8}>\n          <Row>\n            <Col xs={'auto'}>\n              {/* Weather Icon */}\n              <Image\n                src={`https://github.com/murtazaaylak/weather-app/blob/main/public/icons/${selectedData.weather[0].icon}.png`}\n                alt={selectedData.weather[0].description}\n              />\n            </Col>\n            <Col xs={'auto'} className='justify-content-center'>\n              <Row>\n                {/* Temperature */}\n                <Col className='temp-font'>\n                  {Math.round(selectedData.main.temp)}\n                </Col>\n                <Col className='my-2'>\n                  <Row\n                    className={`mb-2 mt-1 px-2 ${\n                      unit === 'metric' && 'font-weight-bold'\n                    }`}\n                    // Set Temperature Unit and fetch data again\n                    onClick={() => {\n                      dispatch(setTempUnit('metric'))\n                      dispatch(fetchWeather(location.name))\n                    }}\n                  >\n                    °C\n                  </Row>\n                  <Row\n                    className={`px-2 ${\n                      unit === 'imperial' && 'font-weight-bold'\n                    }`}\n                    // Set Temperature Unit and fetch data again\n                    onClick={() => {\n                      dispatch(setTempUnit('imperial'))\n                      dispatch(fetchWeather(location.name))\n                    }}\n                  >\n                    °F\n                  </Row>\n                </Col>\n                <Col xs={'auto'} className='my-3'>\n                  {/* Humidity */}\n                  <Row>Humidity: {selectedData.main.humidity}%</Row>\n                  <Row>\n                    {/* Wind */}\n                    Wind:\n                    {/* if unit is metric, convert it from m/s to km/h */}\n                    {unit === 'metric'\n                      ? ` ${msToKmh(selectedData.wind.speed)} km/h`\n                      : ` ${selectedData.wind.speed} mph`}\n                  </Row>\n                </Col>\n              </Row>\n            </Col>\n          </Row>\n        </Col>\n\n        {/* Current Day right Screen */}\n        <Col xs={4} className=''>\n          {/* City & Country */}\n          <Row className='justify-content-end px-2 pt-2'>\n            {location.name}, {location.country}\n          </Row>\n          <Row className='justify-content-end px-2'>\n            {/* Day in string Format */}\n            {\n              new Date(selectedData.dt_txt.split(' ')[0])\n                .toDateString()\n                .split(' ')[0]\n            }\n            {', '}\n            {/* Hour */}\n            {selectedData.dt_txt.split(' ')[1].slice(0, 5)}\n          </Row>\n\n          {/* Weather Condition */}\n          <Row className='justify-content-end px-2 '>\n            {selectedData.weather[0].main}\n          </Row>\n        </Col>\n      </Row>\n    </Container>\n  )\n}\n\nexport default SelectedTime\n","import React from 'react'\nimport { Row, Col } from 'react-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { changeDisplayTime } from '../actions'\n\nconst TimeInterval = () => {\n  // first 24h in 3h time intervals\n  let data = useSelector((state) => state.weather.data)\n  const selectedData = useSelector((state) => state.weather.selectedData)\n  const selectedDay = useSelector((state) => state.weather.selectedDay)\n  const firstDay = data[0].dt_txt.split(' ')[0]\n  const selectedDayData = data.find(\n    (item) => item.dt_txt.split(' ')[0] === selectedDay\n  )\n  const selectedDayDataIndex = data.indexOf(selectedDayData)\n  data = data.slice(selectedDayDataIndex, selectedDayDataIndex + 8)\n\n  const selectedDataTime = selectedData.dt_txt.split(' ')[1].slice(0, 5)\n\n  const dispatch = useDispatch()\n\n  const handleClick = (id) => {\n    // redux action - display selected time weather condition\n    dispatch(changeDisplayTime(id))\n  }\n  return (\n    <Row className='justify-content-center m-3 overflow-auto'>\n      {data.map((item) => {\n        const itemDataTime = item.dt_txt.split(' ')[1].slice(0, 5)\n        return (\n          <div\n            className={`p-1 text-center time-interval rounded ${\n              itemDataTime === selectedDataTime && 'border'\n            }`}\n            key={item.dt}\n            onClick={() => handleClick(item.dt)}\n          >\n            {/* Show hours */}\n            {item.dt_txt.split(' ')[1].slice(0, 5)}\n          </div>\n        )\n      })}\n    </Row>\n  )\n}\n\nexport default TimeInterval\n","import React from 'react'\nimport { Col, Row, Card } from 'react-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { changeDisplayDay, changeDisplayTime } from '../actions'\n\nconst WeatherCard = ({ data }) => {\n  const dispatch = useDispatch()\n  const selectedDay = useSelector((state) => state.weather.selectedDay)\n  const cardDay = data.dt_txt.split(' ')[0]\n\n  return (\n    <>\n      <div\n        key={data.dt}\n        id={data.dt}\n        className='mx-1 weather-card'\n        // select the day and save it to the global state\n        onClick={() => dispatch(changeDisplayDay(data.dt_txt))}\n      >\n        <Card\n          className={`text-center py-3 ${\n            cardDay === selectedDay && 'selected'\n          }`}\n        >\n          <Card.Title>\n            {/* Display day in string Format */}\n            {new Date(data.dt_txt.split(' ')[0]).toDateString().split(' ')[0]}\n          </Card.Title>\n          <Card.Img\n            className='weather-icon'\n            variant='top'\n            // weather icon\n            src={`https://github.com/murtazaaylak/weather-app/blob/main/public/icons/${data.weather[0].icon}.png`}\n          />\n          <Card.Body className='text-center px-0'>\n            {/* Round the temperature */}\n            <Card.Text>{Math.round(data.main.temp) + '°'}</Card.Text>\n          </Card.Body>\n        </Card>\n      </div>\n    </>\n  )\n}\n\nexport default WeatherCard\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { Row } from 'react-bootstrap'\nimport WeatherCard from './WeatherCard'\n\nconst WeatherList = () => {\n  const data = useSelector((state) => state.weather.data)\n  return (\n    <Row className='justify-content-center'>\n      {Number(data[0].dt_txt.split(' ')[1].slice(0, 2)) > 12 && (\n        <WeatherCard data={data[0]} />\n      )}\n\n      {data.map((i) => {\n        if (i.dt_txt.split(' ')[1] === '12:00:00') {\n          return <WeatherCard data={i} key={i.dt} />\n        }\n      })}\n    </Row>\n  )\n}\n\nexport default WeatherList\n","import React from 'react'\n\nconst Footer = () => {\n  return (\n    <footer>\n      <p className='text-center'>\n        Designed by{' '}\n        <a className='author' href='https://github.com/murtazaaylak'>\n          Murtaza Aylak\n        </a>\n      </p>\n    </footer>\n  )\n}\n\nexport default Footer\n","import React from 'react'\nimport { Container } from 'react-bootstrap'\nimport { useSelector } from 'react-redux'\n\nimport SearchBar from './SearchBar'\nimport SelectedTime from './SelectedTime'\nimport TimeInterval from './TimeInterval'\nimport WeatherList from './WeatherList'\nimport Footer from './Footer'\n\nconst App = () => {\n  //global state\n  const data = useSelector((state) => state.weather.data)\n  return (\n    <>\n      <Container className='mb-4 app-wrapper'>\n        <SearchBar />\n        {data && (\n          <>\n            <SelectedTime />\n            <TimeInterval />\n            <WeatherList />\n          </>\n        )}\n      </Container>\n      <Footer />\n    </>\n  )\n}\n\nexport default App\n","import { createStore, combineReducers, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk'\nimport { composeWithDevTools } from 'redux-devtools-extension'\n\nimport { weatherReducer, unitReducer } from './reducers'\n\nconst rootReducer = combineReducers({\n  weather: weatherReducer,\n  unit: unitReducer,\n})\n\nconst initialState = {\n  weather: {},\n}\n\nconst store = createStore(\n  rootReducer,\n  initialState,\n  composeWithDevTools(applyMiddleware(thunk))\n)\n\nexport default store\n","import {\n  FETCH_WEATHER_DATA_FAIL,\n  FETCH_WEATHER_DATA_REQUEST,\n  FETCH_WEATHER_DATA_SUCCESS,\n  SELECT_WEATHER_DISPLAY_DAY,\n  SELECT_WEATHER_DISPLAY_TIME,\n  SET_TEMPERATURE_UNIT,\n} from '../constants'\n\nexport const weatherReducer = (state = {}, action) => {\n  switch (action.type) {\n    case FETCH_WEATHER_DATA_REQUEST:\n      return { loading: true }\n    case FETCH_WEATHER_DATA_SUCCESS:\n      const selectedData = action.payload.list[0]\n      return {\n        data: action.payload.list,\n        location: action.payload.city,\n        selectedData,\n        selectedDay: selectedData.dt_txt.split(' ')[0],\n        loading: false,\n      }\n    case SELECT_WEATHER_DISPLAY_TIME:\n      return { ...state, selectedData: action.payload, loading: false }\n    case SELECT_WEATHER_DISPLAY_DAY:\n      return { ...state, selectedDay: action.payload, loading: false }\n    case FETCH_WEATHER_DATA_FAIL:\n      return { loading: false, error: action.payload }\n    default:\n      return state\n  }\n}\n\nexport const unitReducer = (state = 'metric', action) => {\n  switch (action.type) {\n    case SET_TEMPERATURE_UNIT:\n      return action.payload\n    default:\n      return state\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport './index.css'\nimport App from './components/App'\nimport store from './store'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}